2021.05.25
1. 클래스
이름은 하나이상의 문자로 구성
첫 번째 글자는 숫자x / 대문자로
객체를 만드는 틀 : 필드와 메소드로 구성
instance : 클래스를 꼭 집어서 만든 객체 = 실체
접근제한자 : public / defalt / private
어노테이션 : 주석기능 & 코드역할
main class에만 public을 붙임!

public은 완전 개방형
private는 캡슐화
캡슐화 하는 이유 : 외부의 잘못된 사용으로 인해 객체가 손상되는 것을 방지
멤버필드에는 일반적으로 private를 다 붙임 -> 호출하기 위해서는 getter, setter 필요
같은 패키지 내에서만 접근 가능

static은 객체 만드는 것이 아니라고 컴퓨터에게 알려주는 것
static이 붙은 멤버필드를 class멤버필드라고 함
멤버필드는 전역변수

2. 생성메소드
생성메소드가 없다면 기본생성메소드(기본생성자)가 있는것이다.
즉, public Student(){} 가 생략되어있음.
일반생성자를 넣을 때는 기본생성자를 명시화 시켜야함.
기본생성자로 호출 => 값을 안넣어도 초기값 호출됨
ex)
//기본 생성자 -> 
	public Score() {}
//일반 생성자 ->
	public Score(String name,int kor,int eng,int math) {
		this.name=name;
		this.kor=kor;
		this.eng=eng;
		this.math=math;
	}

3. getter/ setter
=> 매개변수는 앞에 선언했던 자료형 그대로
==> public String getName() {
		return name;
	}

==> public void setName(String name) {
		this.name = name;
	}
main에 호출할때는
someone.setName(" ");
System.out.println(someone.getName());
이렇게 사용

4. 배열
같은 type의 data를 연속된 공간에 저장하는 자료구조
배열이름은 복수로
장점
1. 중복된 변수선언 줄임
2. 반복문 이용해 요소들을 쉽게 처리 가능함

방법
1. 타입[ ] 변수
2. 타입 변수[ ] 
** null로 초기화한 후에는 new로 선언 해야함
배열은 한번 생성하면 크기 변경불가
배열 복사방법
1. for문
2. system.arrayCopy( )
3. Arrays클래스 이용




5. 필드
멤버필드와 메소드 순서는 상관x
일반적으로 생성메소드는 멤버필드 뒤에
멤버 필드(일반적으로 캡슐화(private)로 접근) - 객체의 속성을 담는 전역변수
//멤버 메소드 - 객체의 동작을 실행시키는 것
//특히 메소드 중 객체의 속성값을 세팅시키는 것을 setter라고 한다. => 반환값 없음 => void
//객체의 속성값을 읽어올 수 있게 만든 메소드를 getter라고 한다.
//getters와 setters는 public(접근제한자)으로 접근 


6. 객체지향 프로그래밍
OOP : Object Oriented Programming
객체 : 물리적으로 존재하는것
속성 : 필드
동작 : 메소드
ex) 객체---> 사람 (필드---> 이름, 나이 / 메소드---> 웃다, 먹다)























