2021.05.28
1. 추상클래스(abstract class)
- 이름만 제공하고 자세한 설명은X
- 메소드 중 하나만 추상 메소드여도 그 클래스는 추상 클래스로 간주
- 상속받으면 오류남 -> 그럴 때 override를 써서 구체화 시켜줘야함
- 선언 : 
public abstract class 클래스명{...}

2. 인터페이스(interface)
* 자바에서는 다중 상속은 허용되지 않으나 다중 구현은 허용됨.
의의 : 특수한 클래스 제작을 위한 가이드라인(메소드명 통일)
완전한 추상메소드이기 때문에 abstract 쓸 필요X (추상클래스의 확장판)
'상속'이라는 단어대신 '구현했다'라고 표현
- 일반클래스에서 인터페이스 상속 불가
- 인터페이스에서 인터페이스 상속 가능(다중상속도 가능)
- 선언 : 
(public) interface 인터페이스명{...}
- interface의 구성멤버
1) 상수 // 타입 이름 = 값;
**선언과 동시에 초기값 지정
**interface에 선언된 상수필드는 모두 public static final 자동적으로 붙음
**인터페이스에 있는 상수를 호출할때는 인터페이스명.상수명으로 호출
2) 추상 // 타입 메소드명(매개변수);
3,4번은 자바 1.8버전으로 확장을 위해 추가된 기능
3,4번은 블럭(몸통)이 있어야 함.
3) 디폴트 // default  타입 메소드명(매개변수){...}
4) 정적 // static 타입 메소드명(매개변수){...} 

**default는 메소드 이름을 몰라도 호출 가능
**static은 메소드를 명시해야 호출 가능(여러개 가능)

- 익명의 구현체(인터페이스 구현, 호출을 한 번에) -> 구현을 따로 다른 클래스에 두지않음.
인터페이스명 객체명 = new 인터페이스명( ) {
	**override로 구체화 시켜줘야함!
	@Override
	public void 변수명( ) {
		System.out.println("~~~~~~~~");	
	}	
};
	객체명.변수명();
}

- 내용이 하나도 없어도 인터페이스로 간주
: 구현할 내용은 없고 표시만 인터페이스 => markable interface

3. implements
implements로 구현클래스 선언
일부만 재정의할 경우 추상클래스로 선언(abstract 키워드 붙임)



















