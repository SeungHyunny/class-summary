2021.05.27

1. 객체간의 관계
관계의 종류 
1) 집합
2) 사용
3) 상속 : 생성메소드 제외

2. 생성메소드
- 대문자로 시작(클래스랑 이름이 같아야함)
- 반환타입 상관X

3. 상속 _ 메소드 재정의
- 부모클래스의 상속메소드를 수정해 자식 클래스에서 재정의하는 것(Override)
재정의 조건 :
부모클래스의 메소드와 동일한 시그니처 가져야 함(오버로딩과 다름)
접근제한을 더 강하게 오버라이딩 불가
ex) (작은) private -> default -> protect -> public (큰)
* 작은->큰 (X) 큰->작은(O)
-> 재정의 효과 : 부모메소드가 숨겨지는 효과 발생

- 부모없는 자식은 없다.
- 기본 생성자 필수로 만들어야 함 -> 부모생성자가 없으면 컴파일 오류 발생
- 반드시 자식생성자의 첫 줄에 위치

부모클래스에는 가능한 한 기본 생성자를 두는것이 좋다
부모클래스로 선언하고 자손객체를 생성할 수 있다
 ex) 선언(자손클래스) = 생성(자손클래스)
      AA aa= new BBB
==> 이럴 경우 조상에 없는 필드와 메소드는 사용할 수 없음
==> 오버라이딩 된 메소드가 있다면 자손의 오버라이딩 된 메소드가 실행됨

4. return;
반환타입이 있는 메소드의 경우에는 return; 안됨
void만 가능

5. package
- 패키지 이름이 같아도 이름 뒤에 .을 붙이고 문자를 쓰면  다른 package로 생성됨.
ex) access와 access.a와 access.b가 모두 다른 패키지

6. 어노테이션
* @
* 부모클래스의 메소드와 동일한지 검사
* 부모메소드 : super.
* 자식메소드에서 자기자신 : this.

7. protected
* 같은 패키지 : default와 동일
** default는 같은 패키지에서만 호출 가능
* 다른 패키지 : 자식 클래스에만 접근허용

8. polymorphism(=다형성)
같은 타입이지만 실행 결과가 다양한 객체 대입가능한 성질
-> 부모타입에는 모든 자식 객체가 대입 가능
-> 자식타입은 부모 타입으로 자동 타입 변환
-> 다양한 형질(제한 : 조상이같거나, 인터페이스가 같아야 한다.)을 사용할 수 있다.

9. promotion(자동타입변환)

10. import
외부에 있는 메소드 가져올 때 사용

11. VO(Value Object)
vo클래스 : 주로 데이터베이스로 값을 전달하거나 데이터베이스에서 받은 정보를
	  적절한 객체로 표현하는 클래스
dto : 데이터의 송수신을 위해 만드는 객체로 vo와 혼용되어 사용되고 있음

12. final
용도
1) 필드 앞에 붙이면 -> 초기에 준 값을 변경시킬 수 없다.
2) 메소드 앞에 붙이면 -> 해당 메소드는 자손이 오버라이딩 할 수 없다.
3) 클래스 앞에 붙이면 -> 해당 클래스는 상속 받을 수 없다.













